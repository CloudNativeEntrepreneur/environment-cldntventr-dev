alertmanager:
  config:
    global: {}
    route:
      group_by:
      - alertname
      - cluster
      - service
      group_wait: 10s
      group_interval: 5m
      repeat_interval: 24h
      receiver: slack
      routes:
      - receiver: blackhole
        match:
          alertname: Watchdog
      - receiver: critical
        match_re:
          severity: error|critical
        repeat_interval: 1h
    receivers:
    - name: blackhole
    - name: slack
      slack_configs:
      - api_url: vault:alertmanager:slackUrl
        color: '{{`{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}`}}'
        title: '{{`[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Prometheus Event Notification`}}'
        title_link: '{{`{{ template "slack.default.titlelink" . }}`}}'
        pretext: '{{`{{ .CommonAnnotations.summary }}`}}'
        text: |-
          {{"{{"}} range .Alerts {{"}}"}}
            {{"{{"}}- if .Annotations.summary {{"}}"}}*Alert:* {{"{{"}} .Annotations.summary {{"}}"}} - `{{"{{"}} .Labels.severity {{"}}"}}`{{"{{"}}- end {{"}}"}}
            *Description:* {{"{{"}} .Annotations.description {{"}}"}}{{"{{"}} .Annotations.message {{"}}"}}
            *Graph:* <{{"{{"}} .GeneratorURL {{"}}"}}|:chart_with_upwards_trend:>{{"{{"}} if or .Annotations.runbook .Annotations.runbook_url {{"}}"}} *Runbook:* <{{"{{"}} .Annotations.runbook {{"}}"}}{{"{{"}} .Annotations.runbook_url {{"}}"}}|:spiral_note_pad:>{{"{{"}} end {{"}}"}}
            *Details:*
            {{"{{"}} range .Labels.SortedPairs {{"}}"}} • *{{"{{"}} .Name {{"}}"}}:* `{{"{{"}} .Value {{"}}"}}`
            {{"{{"}} end {{"}}"}}
          {{"{{"}} end {{"}}"}}
        fallback: '{{`{{ template "slack.default.fallback" . }}`}}'
        icon_emoji: '{{`{{ template "slack.default.iconemoji" . }}`}}'
        icon_url: '{{`{{ template "slack.default.iconurl" . }}`}}'
        send_resolved: true
    - name: critical
      slack_configs:
      - api_url: vault:alertmanager:slackCriticalUrl
        color: '{{`{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}`}}'
        title: '{{`[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Prometheus Event Notification`}}'
        title_link: '{{`{{ template "slack.default.titlelink" . }}`}}'
        pretext: '{{`{{ .CommonAnnotations.summary }}`}}'
        text: |-
          {{"{{"}} range .Alerts {{"}}"}}
            {{"{{"}}- if .Annotations.summary {{"}}"}}*Alert:* {{"{{"}} .Annotations.summary {{"}}"}} - `{{"{{"}} .Labels.severity {{"}}"}}`{{"{{"}}- end {{"}}"}}
            *Description:* {{"{{"}} .Annotations.description {{"}}"}}{{"{{"}} .Annotations.message {{"}}"}}
            *Graph:* <{{"{{"}} .GeneratorURL {{"}}"}}|:chart_with_upwards_trend:>{{"{{"}} if or .Annotations.runbook .Annotations.runbook_url {{"}}"}} *Runbook:* <{{"{{"}} .Annotations.runbook {{"}}"}}{{"{{"}} .Annotations.runbook_url {{"}}"}}|:spiral_note_pad:>{{"{{"}} end {{"}}"}}
            *Details:*
            {{"{{"}} range .Labels.SortedPairs {{"}}"}} • *{{"{{"}} .Name {{"}}"}}:* `{{"{{"}} .Value {{"}}"}}`
            {{"{{"}} end {{"}}"}}
          {{"{{"}} end {{"}}"}}
        fallback: '{{`{{ template "slack.default.fallback" . }}`}}'
        icon_emoji: '{{`{{ template "slack.default.iconemoji" . }}`}}'
        icon_url: '{{`{{ template "slack.default.iconurl" . }}`}}'
        send_resolved: true
  ingress:
    enabled: true
    hosts:
      - alertmanager{{ .Requirements.ingress.namespaceSubDomain }}{{ .Requirements.ingress.domain }}
{{- if .Requirements.ingress.tls.enabled }}
    tls:
    - hosts:
      - alertmanager{{ .Requirements.ingress.namespaceSubDomain }}{{ .Requirements.ingress.domain }}
{{- if .Requirements.ingress.tls.production }}
      secretName: "tls-{{ .Requirements.ingress.domain | replace "." "-" }}-p"
{{- else }}
      secretName: "tls-{{ .Requirements.ingress.domain | replace "." "-" }}-s"
{{- end }}
{{- end }}
coreDns:
  enabled: false
defaultRules:
  rules:
    kubernetesResources: false
grafana:
  enabled: false
kubelet:
  enabled: true
  serviceMonitor:
    https: false
kubeControllerManager:
  enabled: false
kubeDns:
  enabled: true
kubeEtcd:
  enabled: false
kubeProxy:
  enabled: false
kubeScheduler:
  enabled: false
kubeTargetVersionOverride: "1.15.999"
prometheusOperator:
  admissionWebhooks:
    enabled: false
    patch:
      enabled: false
  tlsProxy:
    enabled: false
prometheus:
  ingress:
    enabled: true
    hosts:
      - prometheus{{ .Requirements.ingress.namespaceSubDomain }}{{ .Requirements.ingress.domain }}
    paths:
      - path: /
        backend:
          servicePort: 3000
{{- if .Requirements.ingress.tls.enabled }}
    tls:
    - hosts:
      - prometheus{{ .Requirements.ingress.namespaceSubDomain }}{{ .Requirements.ingress.domain }}
{{- if .Requirements.ingress.tls.production }}
      secretName: "tls-{{ .Requirements.ingress.domain | replace "." "-" }}-p"
{{- else }}
      secretName: "tls-{{ .Requirements.ingress.domain | replace "." "-" }}-s"
{{- end }}
{{- end }}
  service:
    additionalPorts:
      - name: http
        port: 80
        protocol: TCP
        targetPort: 3000
  prometheusSpec:
    containers:
      - image: quay.io/keycloak/keycloak-gatekeeper:9.0.3
        name: gatekeeper-sidecar
        ports:
        - containerPort: 3000
        env:
          - name: KEYCLOAK_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: dev
                key: secret
        args:
        - --resources=uri=/*
        - --discovery-url=https://auth.cloudnativeentrepreneur.com/auth/realms/dev
        - --client-id=dev
        - --client-secret=$(KEYCLOAK_CLIENT_SECRET)
        - --listen=0.0.0.0:3000 # listen on all interfaces
        - --enable-logging=true
        - --enable-json-logging=true
        - --upstream-url=http://127.0.0.1:9090 # To connect with the main container's port
      # - name: stackdriver-sidecar
      #   image: gcr.io/stackdriver-prometheus/stackdriver-prometheus-sidecar:0.7.3
      #   imagePullPolicy: Always
      #   args:
      #   - "--stackdriver.project-id={{ .Requirements.cluster.project }}"
      #   - "--prometheus.wal-directory=/prometheus/wal"
      #   - "--stackdriver.kubernetes.location={{ .Requirements.cluster.zone }}"
      #   - "--stackdriver.kubernetes.cluster-name={{ .Requirements.cluster.clusterName }}"
      #   ports:
      #   - name: sidecar
      #     containerPort: 9091
      #   volumeMounts:
      #   - mountPath: /prometheus
      #     name: prometheus-jenkins-x-prometheus-opera-prometheus-db
      #     subPath: prometheus-db
    externalUrl: https://prometheus{{ .Requirements.ingress.namespaceSubDomain }}{{ .Requirements.ingress.domain }}
    # storageSpec:
    #   volumeClaimTemplate:
    #     metadata:
    #       name: prometheus
    #     spec:
    #       storageClassName: ssd
    #       resources:
    #         requests:
    #           storage: 100Gi
